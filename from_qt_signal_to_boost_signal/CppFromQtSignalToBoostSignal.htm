<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>From Qt signal to Boost signal</title>
  <meta name="description" content="C++ From Qt signal to Boost signal"/>
  <meta name="keywords" content="C++ From Qt signal to Boost signal signals boost::signal boost::signals boost::signals move transition"/>
  <link rel="stylesheet" href="Richelbilderbeek.css" type="text/css"/>
</head>
<!-- End of head, start of body -->
<body>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<!-- Page header -->
<h1>
  (<a href="Cpp.htm">C++</a>) 
  <img src="PicQt.png" alt="Qt"/><img src="PicTo.png" alt="to"/><img src="PicBoost.png" alt="Boost"/> 
  <a href="CppFromQtSignalToBoostSignal.htm">From Qt signal to Boost signal</a>
</h1>
<p>&nbsp;</p>
<p>This <a href="CppArticle.htm">article</a> describes why and how to move from using 
<a href="CppQtSignal.htm">Qt signals</a> to using <a href="CppBoostSignal.htm">Boost signals</a>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Introduction</h2>
<p>&nbsp;</p>
<p>The first paragraph contains arguments why to move from <a href="CppQtSignal.htm">Qt signals</a> to 
<a href="CppBoostSignal.htm">Boost signals</a> and when you might refrain from it. The second paragraph
and beyond follow the transition in code for two very simple <a href="CppClass.htm">classes</a>.</p> 
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Why move from <a href="CppQtSignal.htm">Qt signals</a> to <a href="CppBoostSignal.htm">Boost signals</a>?</h2>
<p>&nbsp;</p>
<p>My personal reasons for moving from <a href="CppQtSignal.htm">Qt signals</a> to 
<a href="CppBoostSignal.htm">Boost signals</a>, are:</p>
<ul>
  <li>
    When a <a href="CppLibrary.htm">library</a> supports <a href="CppBoost.htm">Boost</a>, but
    conflicts with <a href="CppQt.htm">Qt</a>
  </li>
  <li>
    <a href="CppBoostSignal.htm">Boost signals</a> do not require the seperation of a 
    <a href="CppClass.htm">class</a> in a <a href="CppHeaderFile.htm">header (.h)file</a> 
    and <a href="CppImplementationFile.htm">implementation (.cpp) file</a> (because
    <a href="CppBoostSignal.htm">Boost signals</a> do not require the use of <a href="CppMoc.htm">moc</a>)
  </li>
  <li>
    Because the <a href="CppStl.htm">STL</a>, <a href="CppTr1.htm">TR1</a> and <a href="CppBoost.htm">Boost</a> 
    <a href="CppLibrary.htm">libraries</a> are 'the number one <a href="CppLibrary.htm">libraries</a>' [1][2]
  </li>
  <li>
    I prefer using standard <a href="Cpp.htm">C++</a> <a href="CppKeyword.htm">keywords</a> only
  </li>
</ul>
<p>&nbsp;</p>
<p>Arguments against moving from <a href="CppQtSignal.htm">Qt signals</a> to 
<a href="CppBoostSignal.htm">Boost signals</a> are:</p>
<ul>
  <li>The <a href="CppQtSignal.htm">Qt signal</a> syntax is easier to read and write</li>
  <li>
    When using only <a href="CppQt.htm">Qt</a>, adding the 
    <a href="CppBoostSignal.htm">Boost signals</a> <a href="CppLibrary.htm">libraries</a>
    increase <a href="CppCompile.htm">compile</a> time
  </li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>The program's goal</h2>
<p>&nbsp;</p>
<p>The program implements two classes: an emitter and a receiver. After connecting the signals and slots, the emitter
emits a signal, received by the receiver.</p>
<p>&nbsp;</p>
<p><a href="CppMain.htm">main</a> should be:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;//Create emitter<br/>
&nbsp;&nbsp;//Create receiver<br/>
&nbsp;&nbsp;//Connect emitter's signal to receiver<br/>
&nbsp;&nbsp;//Let emitter emit its signal<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>Screen output should be like:</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
Emitter: emitting signal<br/>
Receiver: received signal<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>CppFromQtSignalToBoostSignal1: the ideal starting point</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppFromQtSignalToBoostSignal1.zip">Download the Qt Creator project 'CppFromQtSignalToBoostSignal1' (zip)</a></li> 
</ul>
<p>&nbsp;</p>
<p>The code below would be the ideal starting point. But because <a href="CppMoc.htm">moc</a>
requires the seperation of a <a href="CppClass.htm">class</a> in a <a href="CppHeaderFile.htm">header (.h)file</a> 
and <a href="CppImplementationFile.htm">implementation (.cpp) file</a>, this code results in 
the <a href="CppLinkError.htm">link error</a> 
<a href="CppLinkErrorUndefinedReferenceToVtableForMyDialog.htm">undefined reference to 'vtable for [...]'</a>.
Due to this, next step is to seperate the <a href="CppClass.htm">class</a> in a working example.</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQObject.htm">QObject</a>&gt;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="CppEmit.htm">Emit</a>ter : <b><a href="CppPublic.htm">public</a></b> <a href="CppQObject.htm">QObject</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Do<a href="CppEmit.htm">Emit</a>()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppQt.htm">Qt</a><a href="CppEmit.htm">Emit</a>ter: emitting <a href="CppSignal.htm">signal</a>\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> <a href="CppSignal.htm">signal</a>_emit();<br/>
&nbsp;&nbsp;}<br/>
<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppSignal.htm">signal</a>_emit();<br/>
};<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Receiver : <b><a href="CppPublic.htm">public</a></b> <a href="CppQObject.htm">QObject</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<b><a href="CppPublic.htm">public</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnReceive()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppQt.htm">Qt</a>Receiver: received <a href="CppSignal.htm">signal</a>\n";<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create emitter<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppEmit.htm">Emit</a>ter e;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create receiver<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Receiver r;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect emitter's <a href="CppSignal.htm">signal</a> to receiver<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(&amp;e,<a href="CppSignalMacro.htm">SIGNAL</a>(<a href="CppSignal.htm">signal</a>_emit()),&amp;r,<a href="CppSLOT.htm">SLOT</a>(OnReceive()));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let emitter <b><a href="CppEmit.htm">emit</a></b> its <a href="CppSignal.htm">signal</a><br/>
&nbsp;&nbsp;e.Do<a href="CppEmit.htm">Emit</a>();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>CppFromQtSignalToBoostSignal2: the working starting point</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppFromQtSignalToBoostSignal2.zip">Download the Qt Creator project 'CppFromQtSignalToBoostSignal2' (zip)</a></li> 
</ul>
<p>&nbsp;</p>
<p>The code below would be the working starting point. The next step is to replace the 
<a href="CppQtSignal.htm">Qt signals</a> by <a href="CppBoostSignal.htm">Boost signals</a>.</p>
<p>&nbsp;</p>
<h3>main.cpp</h3>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "qtemitter.h"<br/>
<a href="CppInclude.htm">#include</a> "qtreceiver.h"<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create emitter<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a><a href="CppEmit.htm">Emit</a>ter e;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create receiver<br/>
&nbsp;&nbsp;<a href="CppQt.htm">Qt</a>Receiver r;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect emitter's <a href="CppSignal.htm">signal</a> to receiver<br/>
&nbsp;&nbsp;<a href="CppQObject.htm">QObject</a>::connect(&amp;e,<a href="CppSignalMacro.htm">SIGNAL</a>(<a href="CppSignal.htm">signal</a>_emit()),&amp;r,<a href="CppSLOT.htm">SLOT</a>(OnReceive()));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let emitter <b><a href="CppEmit.htm">emit</a></b> its <a href="CppSignal.htm">signal</a><br/>
&nbsp;&nbsp;e.Do<a href="CppEmit.htm">Emit</a>();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<h3>qtemitter.cpp</h3>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "qtemitter.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a><a href="CppEmit.htm">Emit</a>ter::Do<a href="CppEmit.htm">Emit</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppQt.htm">Qt</a><a href="CppEmit.htm">Emit</a>ter: emitting <a href="CppSignal.htm">signal</a>\n";<br/>
&nbsp;&nbsp;<b><a href="CppEmit.htm">emit</a></b> <a href="CppSignal.htm">signal</a>_emit();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<h3>qtemitter.h</h3>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTEMITTER_H<br/>
<a href="CppDefine.htm">#define</a> QTEMITTER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQObject.htm">QObject</a>&gt;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a><a href="CppEmit.htm">Emit</a>ter : <b><a href="CppPublic.htm">public</a></b> <a href="CppQObject.htm">QObject</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<b><a href="CppPublic.htm">public</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Do<a href="CppEmit.htm">Emit</a>();<br/>
<b><a href="CppQtSignals.htm">signals</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> <a href="CppSignal.htm">signal</a>_emit();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppOperatorDivide.htm">/</a><a href="CppOperatorDivide.htm">/</a> QTEMITTER_H<br/>
<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<h3>qtreceiver.cpp</h3>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "qtreceiver.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppQt.htm">Qt</a>Receiver::OnReceive()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppQt.htm">Qt</a>Receiver: received <a href="CppSignal.htm">signal</a>\n";<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<h3>qtreceiver.h</h3>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> QTRECEIVER_H<br/>
<a href="CppDefine.htm">#define</a> QTRECEIVER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppQObject.htm">QObject</a>&gt;<br/>
<br/>
<b><a href="CppClass.htm">class</a></b> <a href="CppQt.htm">Qt</a>Receiver : <b><a href="CppPublic.htm">public</a></b> <a href="CppQObject.htm">QObject</a><br/>
{<br/>
&nbsp;&nbsp;<a href="CppQ_OBJECT.htm">Q_OBJECT</a><br/>
<b><a href="CppPublic.htm">public</a></b> <b><a href="CppSlots.htm">slots</a></b>:<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnReceive();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppOperatorDivide.htm">/</a><a href="CppOperatorDivide.htm">/</a> QTRECEIVER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>CppFromQtSignalToBoostSignal3: the conversion to <a href="CppBoostSignal.htm">Boost signals</a></h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppFromQtSignalToBoostSignal3.zip">Download the Qt Creator project 'CppFromQtSignalToBoostSignal3' (zip)</a></li> 
</ul>
<p>&nbsp;</p>
<p>In the code below, the <a href="CppQtSignal.htm">Qt signal</a> is replaced by using a
<a href="CppBoostSignal.htm">Boost signal</a>. The next step is: can we put all this code in a single file?</p>
<p>&nbsp;</p>
<h3>emitter.cpp</h3>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "emitter.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> <a href="CppEmit.htm">Emit</a>ter::Do<a href="CppEmit.htm">Emit</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppEmit.htm">Emit</a>ter: emitting <a href="CppSignal.htm">signal</a>\n";<br/>
&nbsp;&nbsp;m_<a href="CppSignal.htm">signal</a>();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<h3>emitter.h</h3>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> EMITTER_H<br/>
<a href="CppDefine.htm">#define</a> EMITTER_H<br/>
<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<b><a href="CppQtSignals.htm">signals</a></b>2.hpp&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppEmit.htm">Emit</a>ter<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Do<a href="CppEmit.htm">Emit</a>();<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<b><a href="CppQtSignals.htm">signals</a></b>2::<a href="CppSignal.htm">signal</a>&lt;<b><a href="CppVoid.htm">void</a></b> ()&gt; m_<a href="CppSignal.htm">signal</a>;<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppOperatorDivide.htm">/</a><a href="CppOperatorDivide.htm">/</a> EMITTER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<h3>main.cpp</h3>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> "emitter.h"<br/>
<a href="CppInclude.htm">#include</a> "receiver.h"<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create emitter<br/>
&nbsp;&nbsp;<a href="CppEmit.htm">Emit</a>ter e;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create receiver<br/>
&nbsp;&nbsp;Receiver r;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect emitter's <a href="CppSignal.htm">signal</a> to receiver<br/>
&nbsp;&nbsp;e.m_<a href="CppSignal.htm">signal</a>.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;Receiver::OnReceive,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r));<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let emitter <b><a href="CppEmit.htm">emit</a></b> its <a href="CppSignal.htm">signal</a><br/>
&nbsp;&nbsp;e.Do<a href="CppEmit.htm">Emit</a>();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<h3>receiver.cpp</h3>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> "receiver.h"<br/>
<br/>
<b><a href="CppVoid.htm">void</a></b> Receiver::OnReceive()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Receiver: received <a href="CppSignal.htm">signal</a>\n";<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<h3>receiver.h</h3>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppIfndef.htm">#ifndef</a> RECEIVER_H<br/>
<a href="CppDefine.htm">#define</a> RECEIVER_H<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Receiver<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnReceive();<br/>
};<br/>
<br/>
<a href="CppEndif.htm">#endif</a> <a href="CppOperatorDivide.htm">/</a><a href="CppOperatorDivide.htm">/</a> RECEIVER_H<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>CppFromQtSignalToBoostSignal4: <a href="CppBoostSignal.htm">Boost signals</a> in a single file</h2>
<p>&nbsp;</p>
<ul>
  <li><a href="CppFromQtSignalToBoostSignal4.zip">Download the Qt Creator project 'CppFromQtSignalToBoostSignal4' (zip)</a></li> 
</ul>
<p>&nbsp;</p>
<p>In the code below, all the code is placed a single file, and it works fine!</p>
<p>&nbsp;</p>
<!-- start of code -->
<table border = "1"><tr><td><code>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppIostreamH.htm">iostream</a>&gt;<br/>
<a href="CppInclude.htm">#include</a> &lt;<a href="CppBoost.htm">boost</a>/<b><a href="CppQtSignals.htm">signals</a></b>2.hpp&gt;<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> <a href="CppEmit.htm">Emit</a>ter<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> Do<a href="CppEmit.htm">Emit</a>()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "<a href="CppEmit.htm">Emit</a>ter: emitting <a href="CppSignal.htm">signal</a>\n";<br/>
&nbsp;&nbsp;&nbsp;&nbsp;m_<a href="CppSignal.htm">signal</a>();<br/>
&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;<a href="CppBoost.htm">boost</a>::<b><a href="CppQtSignals.htm">signals</a></b>2::<a href="CppSignal.htm">signal</a>&lt;<b><a href="CppVoid.htm">void</a></b> ()&gt; m_<a href="CppSignal.htm">signal</a>;<br/>
};<br/>
<br/>
<b><a href="CppStruct.htm">struct</a></b> Receiver<br/>
{<br/>
&nbsp;&nbsp;<b><a href="CppVoid.htm">void</a></b> OnReceive()<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppClog.htm">std::clog</a> <a href="CppOperatorStreamOut.htm">&lt;&lt;</a> "Receiver: received <a href="CppSignal.htm">signal</a>\n";<br/>
&nbsp;&nbsp;}<br/>
};<br/>
<br/>
<b><a href="CppInt.htm">int</a></b> <a href="CppMain.htm">main</a>()<br/>
{<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create emitter<br/>
&nbsp;&nbsp;<a href="CppEmit.htm">Emit</a>ter e;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Create receiver<br/>
&nbsp;&nbsp;Receiver r;<br/>
&nbsp;&nbsp;<a href="CppComment.htm">//</a>Connect emitter's <a href="CppSignal.htm">signal</a> to receiver<br/>
&nbsp;&nbsp;e.m_<a href="CppSignal.htm">signal</a>.connect(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="CppBind.htm">boost::bind</a>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;Receiver::OnReceive,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r));&nbsp;&nbsp;<a href="CppComment.htm">//</a>Let emitter <b><a href="CppEmit.htm">emit</a></b> its <a href="CppSignal.htm">signal</a><br/>
&nbsp;&nbsp;e.Do<a href="CppEmit.htm">Emit</a>();<br/>
}<br/>
</code></td></tr></table>
<!-- end of the code -->
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>Conclusion</h2>
<p>&nbsp;</p>
<p>There are reasons to move from using <a href="CppQtSignal.htm">Qt signals</a> to using 
<a href="CppBoostSignal.htm">Boost signals</a>. This article shows that this is easy.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2><a href="CppReferences.htm">References</a></h2>
<p>&nbsp;</p>
<ol>
  <li><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition). ISBN: 0-321-33487-6. Item 53: Familiarize yourself with the standard library, including TR1</li>
  <li><a href="CppScottMeyers.htm">Scott Meyers</a>. Effective C++ (3rd edition). ISBN: 0-321-33487-6. Item 54: Familiarize yourself with Boost</li>
</ol>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="Cpp.htm">Go back to Richel Bilderbeek's C++ page</a>.</p>
<p><a href="index.htm">Go back to Richel Bilderbeek's homepage</a>.</p>
<p>&nbsp;</p>
<p><a href="http://validator.w3.org/check?uri=referer"><img src="valid-xhtml10.png" alt="Valid XHTML 1.0 Strict" height="31" width="88" /></a></p>
</body>
</html>
